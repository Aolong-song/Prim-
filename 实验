//假设带权连通图G有n个顶点，用邻接矩阵A[n][n]表示存储结构，u为指定顶点的序号。
//试设计Prim算法，用于从顶点u出发构造连通图G的最小生成树。

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

typedef struct Graph
{
	int n;	//保存结点数目
	int flag[10];	//结点是否被访问标志,0为未访问
	int weight[10][10];	//权重
}graph;

typedef struct
{
	int  Vi;  //顶点序号
	int  Wi;  //邻接边的最小权值
} Aedge;//记录当前V-U集中的每个顶点和U集中所有顶点代价最小的边

/**创建图的邻接矩阵*/
int Creat_Graph(Graph *G)
{
	int m, n, x;
	char i;
	for (m = 0; m <= 10; m++)
		for (n = 0; n <= 10; n++)
		{
			G->flag[m] = 0;	//未访问初始化为0
			G->weight[m][n] = 0;
		}
	printf("请输入结点个数:");
	scanf("%d", &G->n);
	getchar();
	while (1)
	{
		printf("请输入相邻两边及权重，结束为0\n");
		scanf("%c", &i);
		if (i == '0')
			break;
		m = i - 97;
		getchar();
		scanf("%c", &i);
		n = i - 97;
		getchar();
		scanf("%d", &x);
		G->weight[m][n] = x;
		G->weight[n][m] = x;
		getchar();
	}
	return 0;
}

int Minimum(Graph *G, Aedge *e)
{
	int n , i, k = 0;
	for (i = 0; i <= G->n; i++)
		if (e[i].Wi)
		{
			n = i;
			k = e[i].Wi;
		}
	if (k == 0)
		return 0;
	for(i=0;i<=G->n;i++)
		if (e[i].Wi < e[n].Wi&&e[i].Wi)
		{
			n = i;
			k = e[i].Wi;
		}
	return n;
}

/**构造最小生成树*/
int Prim(Graph *G, char b)
{
	int x = b - 97, i, j, n;	//x为b在矩阵中的下标
	Aedge e[10], t[10];	//e用来存放当前结点权值 t用来存放操作过程
	t[0].Vi = x;
	for (i = 0; i <= G->n; i++)	//初始化结点信息
	{
		e[i].Wi = G->weight[x][i];
		e[i].Vi = x;
	}
	G->flag[x] = 1;
	n = 1;
	for (i = 0; i < G->n - 1; i++)	//循环处理n-2个结点
	{
		x = Minimum(G, e);	//x为最小权值下标
		t[n].Vi = x;
		t[n++].Wi = e[x].Wi;
		e[x].Wi = 0;
		G->flag[x] = 1;
		for (j = 0; j <= G->n; j++)
			if (G->weight[x][j] < e[j].Wi && e[j].Wi && G->weight[x][j])
			{
				e[j].Vi = x;
				e[j].Wi = G->weight[x][j];
			}
			else if (!G->flag[j] && !e[j].Wi&&G->weight[x][j])
			{
				e[j].Vi = x;
				e[j].Wi = G->weight[x][j];
			}
	}
	printf("\n%c\n",b);
	for (i = 1; i < G->n; i++)
	{
		printf("%c->%c\t%d\n", e[t[i].Vi].Vi + 97, t[i].Vi + 97, t[i].Wi);
	}
	return 0;
}

int main()
{
	Graph G;
	G.flag[0] = 0;	G.weight[0][0] = 0;
	char b;
	Creat_Graph(&G);
	getchar();
	printf("请输入开始结点:");
	scanf("%c", &b);
	Prim(&G, b);
	return 0;
}
